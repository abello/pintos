			+------------------+
			|      CS 124      |
			| PROJECT 1: SHELL |
			|  DESIGN DOCUMENT |
			+------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Aleksander Bello <abello@caltech.edu>
Ronnel Boettcher <ronnel@caltech.edu>
Archan Luhar     <archan@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 0

>> What is the Git repository and commit hash for your submission?

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.
Different manpages
http://stackoverflow.com/questions/876605/multiple-child-process

			   COMMAND SHELL
			   =============

---- DATA STRUCTURES ----

>> A1: Describe how your command shell manages parsing and executing
>> commands that contain arguments and pipes, using the example
>> command "a arg1 arg2 | b arg1 | c arg1 arg2 arg3".  How does your
>> shell internally represent such a command?

When a command is typed into our shell, we tokenize the input, then iterate
through the tokenized input in make_cmd_ll, which creates a linked list of 
Command structs. A Command struct is created whenever we encounter a pipe.
In the example above, "a arg1 arg2", "b arg1", and "c arg1 arg2 arg3" would 
each be represented in their own Command structs. Command structs contain 
all the information necessary to execute the command with execve. It contains
the process name, argc (for "a arg1 arg2", for example, argc would be 3), 
argv (a null terminated list), any redirects, and a "next" pointer, which 
points to the next Command struct in the linked list. 

We set all the fields of each Command struct while iterating through the
tokenized input array, and we create Command structs when a pipe symbol is
encountered. When a Command struct is created, we update the pointer to the
current Command to the new command after setting the current command's next
pointer to the newly created command struct. At the end of make_cmd_ll, we
return the head pointer of the new linked list. In the example above, this 
would be a linked list of 3 command structs, the first with argc 3, the second
with argc 2, and the third with argc 4. Also note that when a field is not 
specified it is given a value of NULL, which we check for in certain areas
(especially when executing commands in the linked list).

>> A2: Now, given the command:
>> "a arg1 arg2 < inp.txt | b arg1 | c arg1 arg2 arg3 > out.txt"
>> Briefly explain specifically how the redirections are parsed and
>> represented, and by what processes.

Our tokenizer takes the string input typed into the shell and ensures that
any redirect symbols (">" or "<") are made into their own tokens. Thus, when
creating the command struct linked list described above, it is very easy to 
check if the current token found while iterating through the tokenized input 
is a redirect symbol. If this is true, then the token immediately after the 
redirect symbol is set to be the file location of the redirect. Of course,
we check what type of redirect is performed, and adjust the stdin_loc and
stdout_loc fields of the current command struct accordingly, depending on 
if we encountered a ">" or a "<". 

Thus, in the example above, in the command "a arg1 arg2 < inp.txt", upon 
encountering a "<", we take the file at the index after the current index,
and store this location into the current command struct's stdin_loc field.
Then, in "b arg1", in a new Command struct, we encounter no redirects, so 
there is no need to modify the current Command struct's stdin_loc or 
stdout_loc. And finally, in the last command "c arg1 arg2 arg3 > out.txt",
upon encountering ">", we take the index after the current index, and store
this file location into the stdout_loc field. 

---- ALGORITHMS ----

>> A3: Illustrate how you solved the problem of setting up
>> redirection in a simple command like "a < inp.txt > out.txt", by
>> describing what process takes care of the redirection and when.

When executing commands, we would have a command struct for a. The
struct will store stdout_loc and stdin_loc, which would be set to the
path for inp.txt and out.txt. Then, we open inp.txt, dup2() stdin to
the file, then close the original file descriptor, since now stdin is
pointing to it.

Similarly, we create out.txt with the appropriate permissions (using open()),
then we dup2 stdout to this file. Then we finally close the original file
handler, since now stdout is pointing to the file. 

This achieves the desired effect of redirecting the streams to the requested
file paths.

>> A4: Illustrate how you solved the problem of setting up the pipes
>> between multiple operations in a single command, by describing
>> what each process is responsible for.  For example, given the
>> command "a | b | c", describe the sequence of steps in setting up
>> the processes and their pipes, starting with your command shell's
>> process, and going through the execution of programs a, b and c.
>> Keep your description of each process' responsibilities limited to
>> ~25 words or less.

For the example given above, piping would work as follows: Before any child
process is forked, the parent process initializes an int[2] array called 
pipefd with the pipe() system call. Child "a" is forked, and we dup2 the 
write end pipefd into "a"'s STDOUT_FILENO. We close the read end of pipefd
since we do not need it. In the parent process after "a" is forked, we 
copy pipefd into an int[2] array called prev_pipefd. We then initialize a 
new pipe with pipefd. Then, child "b" is forked. We dup2 the read end of 
prev_pipefd (which is piping data from child "a") into STDIN_FILENO. We dup2 
the write end of pipefd into child "b"'s STDOUT_FILENO. In the parent process 
after forking child "b", we close prev_pipefd (since we don't need it)
and then before forking child "c", we copy pipefd into prev_pipefd, and since
we have reached the last command now, we don't create any more pipes. After
forking child "c", we dup2 prev_pipefd (which is piping data out of child "b")
into child "c"'s STDIN_LOC. 

This process would be repeated if there were additional pipes: i.e., the 
process of creating a new pipe every iteration, and moving the current 
pipefd to prev_pipefd, then using dup2 to direct output between adjacent
child processes. 

>> A5: Similarly, describe the details of how terminated processes are
>> reaped in the example command "a | b | c".

In the above example, mysh would have forked 3 times, hence have 3
children (a, b, c). They could certainly terminate at very different 
times, and we need to reap them all. Thus, when fork()-ing we maintain
an array of pid-s (pids[]), so the parent knows the id-s of all of its
children.

Then, it initializes remaining to num_spawned_processes. While
there are still remaining processes, it loops through pids[] and
waits for the first nonzero pid (hence reaps it). After it reaps this
child, it sets that pid in the array to 0, so that next time it knows that
that child has already exited, so that it doesn't waitpid() for it.

Clearly, after remaining is 0,
all pids[] are set to 0, hence all children have exited and
been reaped. 


>> A6: Similarly, describe which processes are responsible for setting
>> up the redirections in the example command
>> "a < inp.txt | b | c > out.txt".

After fork()-ing, the exec_cmds() function (in the child), before execve()-ing
will check for the values of stdin_loc, stdout_loc, stderr_loc in the
command struct. If they're NULL, it means that they aren't redirected to any 
paths. If they are non-null, it means that we're redirecting streams. 

For a: we open inp.txt, dup2() STDIN_FILENO to inp.txt, then close the file 
(stdin fd is now pointing to it).
Then we connect a and b with a pipe (as described above; a's stdout is
write end of pipe; b's stdin is read end of pipe)
For b we have no redirection, so just dup2() b's stdout to the write end of
pipe2, and c's stdin to the read end of pipe2. Of course, the extra fd-s should
be closed.

For c: we create and open (with appropriate permissions) out.txt, then
dup2() STDOUT_FILENO to that file, then we close the file (stdout fd is
now pointing to it).

Note that although we don't set stderr_loc in this implementation, for
extensibiilty we left it there (say we wanted to support stderr redirects
in the future).

Then we execve(). Since execve() doesn't create a new process (just replaces
the current one) all the file descriptors we set up before are still valid.

---- RATIONALE ----

>> A?: Why do the chdir and exit commands have to be implemented as
>> built-in functions, rather than external programs?

The shell implements the chdir command because the current working directory
of the shell can only be changed, using chdir, by the shell itself.

The exit command is also implemented as a built-in function because it is
easier if the program terminates itself rather than an external program. The
external program would need to kill its parent by send it a SIG. Then it too
would have to exit itself. To remove redundancy, the shell exits itself 
simply by returning from main.


>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

In choosing the data structures to represent the series of processes to be 
executed, we decided that the Command struct linked list design would suit 
our needs very well. Each Command struct is capable of containing all the 
information necessary to execute that particular command/process, in a 
convenient struct.

For the piping design, we did consider then abandon one alternative: Instead
of our current design, we previously considered creating all the pipes in the 
parent process before forking any children. We realized, however, that this is
an inferior design, because the child process, when forked from the parent 
process, would have a copy of this pipe array uneccesarily, and the child 
process would have to go through this array and close all the pipes that it
did not need. Instead, our alternative only keeps pipes that are needed open,
and only creates pipes when they are needed, then closes them when they are 
not.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

