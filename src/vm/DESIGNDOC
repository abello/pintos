                    +---------------------------+
                    |           CS 124          |
                    | PROJECT 5: VIRTUAL MEMORY |
                    |      DESIGN DOCUMENT      |
                    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Aleksander Bello <abello@caltech.edu>
Ronnel Boettcher <ronnel@caltech.edu>
Archan Luhar     <archan@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  
0

>> What is the Git repository and commit hash for your submission?

   Repository URL:  /cs/courses/cs124/teams/pintos-bbl
   commit d7f134b919a49e0890dc960bb3b56580687c5ccf

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
A remark regarding the eviction policy: We implemented second
chance, however, had some issues at the very last moments before
submission. We found out that FIFO isn't too bad wall-clock wise,
thus converted the second chance to a FIFO eviction. However,
the second chance implementation is still there, and can be 
enabled by commenting/uncommenting 2 lines.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

When a user process tries to access a user virtual address, there are two 
possibilities: the page is already in some frame, or the page is located 
somewhere else (swap, file system, etc). The first case is handled on the
hardware level -- the valid bit is set for the pte corresponding to this user
virtual address, therefore the MMU can perform the tranlation to the physical
frame which contains the page.

In the second case, the page fault handler deals with finding a frame in which
we can store the page. We do so by calling palloc_get_page with the PAL_USER 
option, then adding a mapping from this kpage to the faulting virtual page,
so on page_fault return the user vaddr will be valid. Sometimes we are unable
to obtain a kpage because the user pool is full. In this case, we call the 
function frame_evict. This evicts a page using the page eviction policy, then
returns the kpage of this frame. Thus, we now have a kpage that we are free to
map to the faulting user page. 

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We avoid this issue by using user virtual addresses for all accesses to the 
physical frame. Our only interaction with the kpage vaddr is to initialize
the page (by reading in from file system or swap if needed, into the kpage),
then setting the mapping from the user virtual address to the kernel virtual
address with pagedir_set_page. From then on, we interact only with the user
virtual address.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

A frame_lock is needed to be acquired any time a process
wants to modify/read the frame queue. Hence, there can't
be a race between two processes when dealing with frames.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

The hash table is both memory and and time efficient. We originally used a
linked list, but noticed that tests were performing very slowly. We changed
swap table, frame table and supplemental page tables to use the hash table
implementation.

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct frame {
    /* The kernel virtual address of the frame. */
    void *kpage;
    /* The virtual address of the page that currently occupies the frame at 
       index FRAME_NUM. */
    void *upage;
    /* Store the pointer to the thread/process that owns this upage. */
    struct thread *thread;
    
    /* The list_elem in the frame table list. */
    struct hash_elem elem;

    /* The list_elem for the frame queue for eviction policy. */
    struct list_elem q_elem;
};

>> The frame struct keeps track of items in the frame table -- in physical 
memory. 

struct hash frame_table;

>> The frame_table variable is a global hash table which stores frame struct
types. It is used for keeping track of the state of the physical frames.

struct list frame_queue;

>> The frame_queue is used internally by the frame table to implement the 
eviction policy, FIFO.

enum pg_type_flags {
    /* Page is in the file system. */
    FILE_SYS = 001,
    /* Page is in swap space. */
    SWAP = 002,
    /* Page is all zeros. */
    ZERO = 003,
    /* Page is in physical memory. */
    PMEM = 004
};

>> Used internally to denote the type of page stored in a vm_area_struct.

struct vm_area_struct {
    /* Virtual memory start and end addresses. */
    void *vm_start;
    void *vm_end;

    /* The kernel virtual address for when pg_type == PMEM. */
    void *kpage; 

    /* Is this memory area writable. */
    bool writable;

    /* Is this area pinned */
    bool pinned;

    /* Pointer to the file object of the mapped file, if any. */
    struct file *vm_file;

    /* Offset in the mapped file. */
    off_t ofs;

    uint32_t pg_read_bytes;

    /* Sector index within the swap partition. NULL if pg_type != SWAP. */
    block_sector_t swap_ind; 

    /* The type of page. */
    enum pg_type_flags pg_type;

    struct hash_elem elem;
};

>> The vm_area_struct are the entries stored in the supplemental page table. 
Each vm_area_struct keeps track of an individual page allocated by the user 
process. 

struct block *swap_device;

>> The swap_device is the swap block struct returned by block_get_role() used
to access and manipulate the swap partition. 

struct hash swap_table;

>> The global swap table is used for interacting with the global swap 
partition. We use a hash table for the implementation.

struct swap_slot {
    /* The sector index of the page stored in swap. */
    block_sector_t sector_ind; 

    struct hash_elem hash_elem;
};

>> A swap_slot, stored in the swap_table. Each swap_slot corresponds to 8
sectors, since 8 * SWAP_BLOCK_SIZE = PGSIZE. Each swap_slot in the hash
table corresponds to a page written into swap.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
As mentioned above, we first implemented a second chance policy.
The reasons for this are that it's a simple algorithm, while
providing decent performance/page fault rate. The way the 
algorithm works is the following:
Frames are held in a queue, and any time we have to evict, we
examine the first frame in the queue. If it's accessed bit is
set, we unset it (set it to 0), and put it in the back of the 
queue. Then we do the same thing for the next frame, until we
find a frame that's on the head of the queue but its access bit
isn't set: that's the frame that we evict. Note that this 
algorithm, in the worst case degrades to a FIFO (if every page's
access bit is set, then it's gonna dequeue/enqueue each frame, 
until it gets back to the first one, then kick that out (assuming
that one hasn't been accessed in the meantime)).

We also tried a FIFO startegy, and ended up submiting that
instead. The main reason is that we were having some subtle 
issues close to the deadline, and just did FIFO instead. However,
if one desired to switch to Second Chance, only two lines need to be
changed (one commented out, the other uncommented).

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

The most common way this type of situation will occur is when Q's frame is
evicted by the eviction policy. When this occurs, the frame struct in the 
frame table which stores the mapping from the kpage to the virtual address
and Q's thread struct is removed. Also, the vm_area_struct corresponding to
the virtual address previously in the page is changed to denote that it has
been moved to swap. This is done by altering the pg_type field and setting
the swap_ind to be the index of the page storedin swap. 

With these tasks completed, the process P can now add its page to the frame.
It does so by simply creating an entry in the frame table, mapping P's thread
struct and virtual page to the kpage which corresponds to this physical 
frame. 

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
There are 3 cases when the stack needs to be extended:

When a push happens. In this case, the faulting address will
be 4 bytes above the esp (as described in the spec). If this happens, 
the a new frame will be acquired and mapped into the appropriate
user page.

When a pusha happens. In this case, the faulting address will
be 32 bytes above the esp (as described in the spec). If this happens, 
the a new frame will be acquired and mapped into the appropriate
user page.

When the faulting address is above ESP, but still is_valid_user_addr(). 
This could happen in the following scenario: a user program statically allocates
(in the stack) a very large array. What that does, is that it 
just subtracts the array size from ESP, but it the size is
large enough, it can make ESP "fall into" a different (probably unallocated)
page. Moreover, it can also happen that there could be a few unallocated
pages between ESP and where the beginning of the stack is 
(if we're statically allocating a very large array).
So we also check for that, and we map the appropriate page (even
if it falls above ESP).

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

There is a frame lock, a swap lock, and no locks for supplemental page tables
since each is dedicated to a process. The frame lock is a global lock on the 
frame table, such that no two processes can add or remove things from the 
frame lock at once. There is also a lock on the swap partition, since this too
is global. This avoids situations in which two processes try to write their
pages to the same sector within the swap partition at the same time. Lastly,
the supplemental page table is per process, and since processes do not interact
with other process' supplemental page tables, synchronization issues should
not occur.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

We remove the page from that processes page directory. We use a frame lock to
lock the replacement process.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

When we are adding P's pages into the frame table after a page fault, there is
a flag "pinned" in the vm_area_struct for the page that is set to TRUE. When
this pinned flag is set, the contents of that frame cannot be paged out. The 
pinned flag is set to FALSE after process P has successfully paged in its 
pages into the kpages. 
_
>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

When we have paged out pages that occur during system calls, this is handled
by our page fault handler. In the page fault handler, we bring in the page
from swap if it is there, or from the file system -- or if the page consists
of all zeros, we simply allocate a new frame and fill it with 0s. We do have
a mechanism for "locking" frames into physical memory -- we have a pinned 
flag in the vm_area_struct. If an invalid virtual address is passed in, 
we simply return exit(-1). 

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We use several locks but limit ourselves such that there aren't locks for
every single data structure but generalized locks for systems such as those
which manage the frames, supplemental page tables, filesystem, and swap.


             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

* thread.h: Mapping id
typedef int mapid_t;

* thread.h: Stores a mapping's details. The first vm area struct and the
            number of pages allocated for the file.
struct mmap_t {
    struct vm_area_struct * first_vm_area;
    int num_pages;
};

* thread.h: Added to the process struct details about open
            mappings, just like open files.
struct process {
    ...
    int num_mapids_open;
    bool open_mapids[MAX_OPEN_FILES];
    struct mmap_t open_mmaps[MAX_OPEN_FILES];
};


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory mapped files are just pages added to the supplemental page table
with properties set that inform the page fault handler that the page for a
memory address is supposed to represent the contents of a file with a certain
offset into the file.

We do not differ evicting mapped file pages and other pages. We could write
mapped file pages to the file instead of swap as this was not exactly
specified by the instructions. In addition the instructor said it was alright
to evict to swap all types of pages.

We could have written some heuristics and added some flags to prevent
this extra copy pasting but it was not deemed important for this pintos
implementation.


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We determine whether a new file mapping overlaps any existing segment by
calculating the number of pages required for the mapping and going through
each starting address for all the pages required for the mapping and making
sure they are not already present in the supplemental page table for the
process.


---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

The implementations are similar but the mapped executable mapping is not
obviously writable back to memory as it doesn't get formally "munmap"ed while
exiting as do other mappings which get written back. This is because it is
not listed in the array of mappings for a process in the process_details.



               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
Too little.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

