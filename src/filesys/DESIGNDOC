       	       	     +-------------------------+
                     |          CS 124         |
                     | PROJECT 6: FILE SYSTEMS |
                     |     DESIGN DOCUMENT     |
                     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

>> Specify how many late tokens you are using on this assignment:  

>> What is the Git repository and commit hash for your submission?

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk {
    off_t length;
    unsigned magic;

    int blocks[IDX_BLOCKS];
};

>> I changed the "unused" array to an int array of index blocks, containing
the sector indices of the direct, indirect, and doubly indirect blocks.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

There are 126 index blocks. 124 of them are direct blocks. Each direct blocks
point directly to blocks on the file system used for file storage, so the
direct blocks store up to 124 * 512 = 63,488 bytes.

There is one indirect block. This indirect block points to a block containing
128 indices, each of which points to a storage sector on disk. Thus, the
indirect block stores up to 128 * 512 = 65,536 bytes.

Lastly, there is one doubly indirect block. This block points to an index
block, containing 128 indices. Each of these indices points to another index
block, containing 128 indices, pointing directly to storage blocks on disk.
Thus, the doubly indirect block stores up to 128 * 128 * 512 = 8,388,608
bytes.

Thus, in total, our inode structure can support
    63,488
    65,536
   +8,388,608
   ----------
    8,517,632

bytes, equivalent to 8.12 megabytes. Thus, the inode structure supports a
little over 8 megabytes.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

When two processes try to extend a file at the same time, they will both 

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// TODO Archan

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

Traversals of absolute and relative paths differ at the start of a
traversal. At the start, the current directory of the traversal
is chosen as "/" if it is an absolute path (first character is '/')
or is chosen as the current working directory otherwise.

Then, a name of the next node is built up and when we've reached
the the end of the node (a '/' character or an NUL '\0' character)
we look for an entry in the current directory with that name.
If we're at the end we make sure we have what we came for and it
is valid. If we're not at the end then we keep looping, advancing
the current directory.


---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

// TODO Archan

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

No, the implementation does not allow a directory to be removed if it
is open by a process or if it is in use as a process's current working
directory. We prevent this by checking if the path specified is a
directory with same sector as the current working directory or if
it has same sector as any directory open in the process's array of
open file/directories.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

// TODO Archan


			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?

