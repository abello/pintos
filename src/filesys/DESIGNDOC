                     +-------------------------+
                     |          CS 124         |
                     | PROJECT 6: FILE SYSTEMS |
                     |     DESIGN DOCUMENT     |
                     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

>> Specify how many late tokens you are using on this assignment:  

>> What is the Git repository and commit hash for your submission?

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

             INDEXED AND EXTENSIBLE FILES
             ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


struct inode_disk {
    off_t length;
    unsigned magic;

    int blocks[IDX_BLOCKS];
};

>> I changed the "unused" array to an int array of index blocks, containing
the sector indices of the direct, indirect, and doubly indirect blocks.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

There are 126 index blocks. 124 of them are direct blocks. Each direct blocks
point directly to blocks on the file system used for file storage, so the
direct blocks store up to 124 * 512 = 63,488 bytes.

There is one indirect block. This indirect block points to a block containing
128 indices, each of which points to a storage sector on disk. Thus, the
indirect block stores up to 128 * 512 = 65,536 bytes.

Lastly, there is one doubly indirect block. This block points to an index
block, containing 128 indices. Each of these indices points to another index
block, containing 128 indices, pointing directly to storage blocks on disk.
Thus, the doubly indirect block stores up to 128 * 128 * 512 = 8,388,608
bytes.

Thus, in total, our inode structure can support
    63,488
    65,536
   +8,388,608
   ----------
    8,517,632

bytes, equivalent to 8.12 megabytes. Thus, the inode structure supports a
little over 8 megabytes.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

When two processes try to extend a file at the same time, they will both call
inode_write_at with the same arguments -- same file, offset, and size. There 
will not be a race, however, because when they attempt to write to the sector
corresponding to the byte offset both processes attempt to write to, they will
encounter the cache read/write locks, which prevent the two processes from 
writing to the same location at the same time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.
A read-write lock mechanism is used to synchronize concurrent reads 
and writes to blocks. This system allows multiple concurrent read
ers, but not writers (or a combination of readers + writers) in t
he same block. Since a file consists of multiple blocks, depending
on what thread obtains the lock first, a reader can either see
the unmodified version of the file (if the readers get the lock first),
or a writer will acquire the lock, modify the file, then the readers
will see the new version of that block (i.e. part of file). In
this way, the readers only read data that the writers write, or
original data that was there before writers wrote (if they get
the lock first); but in this case the writers never wrote, so its OK!

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

File read/write is done in blocks, i.e. the lock is not in the file-level. 
The locks, too, (read write lock) are granular enough that don't lock the entire
file, but only cached blocks. Hence, this is a major improvement,
especially for big files. Multiple concurrent readers
are allowed without blocking each other, but not writers (or a comination of 
writers and readers).

However, there is no "preemptive fairness", in the sense that writers
won't block new readers from reading (if someone's already reading).
This could be disatvantageous if there are tons of readers/writers 
to the same block. It should not be a big deal for usual disk IO.

The current approach could be extended the following way:
If a writer tried to get the write lock, don't wait for all readers to 
finish, but set up a flag to block future readers (hence only wayt for current readers to finish).

This was not implemented because this sort of fairness wasn't explicitely 
mendioned in the spec (and we have just a couple of hours to 
turn this in, don't wanna mess it up)

Also note that writers can never block readers indefinitely, because there can only be only one writer to the sector with the
write lock. When he finishes, either another writer can get the
lock, or another reader. They are both treader equaly, hence this
case is completely fair.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

We chose 124 direct blocks, 1 indirect block, and 1 doubly indirect block,
because it allowed for maximum file sizes just over 8 megabytes -- the size we
were required to support. The arithmetic demonstrating this is shown in A2. 

                SUBDIRECTORIES
                ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

thread.h: added directories list and a variable to indicate if
the file descriptor is that for a directory or a file.
struct process {
    ...
    bool fd_is_dir[MAX_OPEN_FILES];
    ...
    struct dir * directories[MAX_OPEN_FILES];
};

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

Traversals of absolute and relative paths differ at the start of a
traversal. At the start, the current directory of the traversal
is chosen as "/" if it is an absolute path (first character is '/')
or is chosen as the current working directory otherwise.

Then, a name of the next node is built up and when we've reached
the the end of the node (a '/' character or an NUL '\0' character)
we look for an entry in the current directory with that name.
If we're at the end we make sure we have what we came for and it
is valid. If we're not at the end then we keep looping, advancing
the current directory.


---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

Since directories are read to and written to just like files -- through
inodes -- these simultaneous attempts to remove or create the same file
or directory are theoretically prevented by inode read and write locks.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

No, the implementation does not allow a directory to be removed if it
is open by a process or if it is in use as a process's current working
directory. We prevent this by checking if the path specified is a
directory with same sector as the current working directory or if
it has same sector as any directory open in the process's array of
open file/directories.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

The directory structure is almost the same as the initial structure
before the implementation of subdirectories. Now, we search for
files in root by searching the dir entries in directory of represented
by the inode of the root directory sector. The dir entries specify
the sector representing an inode which is a child of that directory.
The dir entries also specify whether the child is a directory or
a file.

We had to stick to this way even though arguably it's better to
specify whether something is a folder or a file in the inode on
disk itself for completeness. Right now it's taken that root /
is a directory because it is hard coded in. Whenever a child is
searched for, we set the is_dir flag of the inode struct based
on the is_dir flag of the corresponding dir_entry struct.


                 BUFFER CACHE
                 ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct lock ra_lock;
Used to lock the readahead list form concurrent modifications.


bool rad_stop = false;
bool wbd_stop = false;
Flags to control when to stop the write behind and
read ahead daemons


struct lock ht_lock;
Used to lock the hashtable when accessing/modifying it. Note that
this isn't a global FS lock since this lock is held only 
to obtain the actual cache block, then released.


struct hash cache_table; 
A mapping between filesys sector index and cache index. 


struct cache_block cache[CACHE_SIZE];
The actual cache itself. An array of cache_block's.


static int hand;
The clock hand index for implementing the clock policy. Corresponds to an 
index in cache.


struct lock hand_lock;
Lock to protect hand pointer used in the clock policy

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We utilize the second chance policy. The second chance policy (AKA clock 
policy) keeps track of a queue, and the entry at the head of the queue is
evicted if it has been accessed. Otherwise, its accessed bit is cleared, and
its enqueued. In our implementation, we use a circular buffer queue, meaning 
we keep track of a "hand" pointer corresponding to the front of the queue. 
When we seek to remove an entry from the cache, we examine the entry where the
"hand" is, and check if it is accessed. If so, we clear its accessed bit, then
advance the hand by 1 (also modding by the maximum size of the cache -- 64). 
By advancing the hand by 1 entry when we've found an entry with its accessed
bit set, this is equivalent to moving that entry to the back of the queue, 
since the hand would have to advance throughout the entire queue again to 
encounter that same block. 

When the hand points to a cache entry with its accessed bit cleared, we then
check the dirty bit of the block. If its dirty, we write to the sector it the
cache entry corresponds to. Otherwise, do nothing. Then, we write the new 
cache entry details into the position where the hand stopped at, effectively
evicting the previous block.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

An access pattern in which we access the same blocks with regular frequency,
and not too many other blocks, would benefit immensely from the buffer cache.
This is most optimal of course if we are accessing a number of blocks less than
the size of the buffer cache.

A sequential file read (reading from beginning to end) access pattern would 
benefit from the read-ahead daemon, since, when the process eventually reads
the next sector, it will already be loaded into cache. Of course, the 
read-ahead daemon would also benefit any process reading or writing to sections
of code that are at least larger than the size of one sector, for the same 
reasons.

Write-behind will benefit processes which make repeated writes to the same 
offsets within the file, since, on each write, we do not have to write to the
file system immediately after.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?

