			+--------------------+
			|       CS 124       |
			| PROJECT 3: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Aleksander Bello <abello@caltech.edu>
Ronnel Boettcher <ronnel@caltech.edu>
Archan Luhar <archan@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  
One.

>> What is the Git repository and commit hash for your submission?

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
 
struct thread_sleeping {
  /* Thread pointer. */
  struct thread *t;

  /* End time. Compare to timer_ticks(). */
  int64_t end_ticks;

  /* List element for sleep list */
  struct list_elem elem;
};

- Struct thread_sleeping is the data structure used to keep track of sleeping 
threads. End_ticks keeps track of when the thread should be awoken. 

static struct list sleep_list;

- sleep_list stores thread_sleeping structs, and is iterated over every clock
tick to check if there are any threads that need to be woken up.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

- When timer_sleep() called, thread_sleep is called, and passed the value
timer_ticks() + ticks, and then we initialize a thread_sleeping struct with
and end value timer_ticks() + ticks. We store this struct in sleep_list. When
the timer interrupt handler takes us to thread_sleep(), we use the sleep_list
to wake up any threads whose end_ticks are less than timer_ticks(). Also, 
we check if the thread we have just woken up has priority greater than the
current running thread's priority, and we yield if the awoken thread's 
priority is greater. 

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

- sleep_list is kept as a sorted list, where threads that need to be woken up
earliest are stored closer to the beginning of the sleep_list. Thus, we simply
pop the first list_elem from the sleep_list to wake up the thread.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

- We chose this design because it minimized the amount of time spend in
thread_tick(), since we only have to check the beginning of sleep_list to 
determine whether or not we have to wake up any threads. 

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    ...
    int donation_priority;              /*!< Donation priority (-1 if N/A). */
    ... 
    struct thread *donee;
    ...
};

- We added the above fields to struct thread. "donation_priority" keeps track 
of the current donated priority to this thread (-1 if no donations). "donee" 
is the thread this thread donates to (NULL if no donee). 

struct priority_donation_state {
    /* The lock that the current thread is seeking to unlock so that the 
     * thread running previously can resume execution.
     */
    struct lock *lock_desired;
    struct thread *donor;
    struct thread *donee;
    struct list_elem elem;              /*!< List element. */
};

- "priority_donation_state" keeps track of priority donations... most 
importantly for what desired lock the donation occurred. We also store
donor and donee. This is stored in "pri_donation_list".

extern struct list pri_donation_list;

- "pri_donation_list" stores priority_donation_state structs, and is used to 
store the information about a priority donation represented in the 
priority_donation_state.  

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

- In the case of locks, when a lock is released in lock_release, we remove 
any priority_donation_state from pri_donation_list where lock_desired is the 
lock we are releasing, and the donee is the current thread. In this case, the
current thread running has "done its job" as a priority donee, by releasing 
the lock desired by a higher priority thread. After deleting these instances
from pri_donation_list, we iterate through the pri_donation_list again, to see
if the current running thread is a donee for any other threads, in which case
the current running thread will appear as some donee in the pri_donation_list.
We choose the largest donor out of these threads (if there are any), and set
the current thread's donation_priority equal to this largest value. If there
are no more donors for the current thread, donation_priority is set to its 
default value of -1. Then, we sema_up the semaphore for the lock we are 
releasing to unblock its waiters. In thread_unblock(), we ensure that the
newly unblocked threads are placed into their correct location in the sorted
ready_list. Thus, when thread_yield is called, we can be sure that the newly
unblocked thread with the highest priority will run next. 

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

This assignment was very difficult and took

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
